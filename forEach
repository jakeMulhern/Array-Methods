<script src="../tinytest.js"></script>
<script>

// forEach(/* array */, /* callback */, /* configurableThisObject */)

//Example 1:
// forEach([1, 2, 3], function() {
//   console.log('hi');
// });

// Example 2:
// forEach([1, 2, 3], function(number) {
//   console.log(index);
// });

// Example 3:
// forEach([1, 2, 3], function(number, index) {
//  console.log(index);
// });

// Example 4:
// forEach([1, 2, 3], function(number, index, originalArray) {
//    console.log(originalArray);
// });

// Example 5:
// forEach([1], function() {
    // eq(this.description, 'configurable this object');
// }, {description: 'configurable this object'});

function forEach(array, callback, optionalThisObject) {
  var forEachCallback = callback;

  // If configurableThisObject exists.
  if (optionalThisObject) {
    // We want to bind configurableThisObject to the callback function
    forEachCallback = callback.bind(optionalThisObject);
  }

  for (var i = 0; i < array.length; i++) {
    forEachCallback(array[i], i, array);
  }
}

tests({

  'It should run the callback function array.length times.': function() {
    var numberOfTimesCallbackHasRun = 0;
    forEach([1, 2, 3], function() {
      numberOfTimesCallbackHasRun++;
    });
    eq(numberOfTimesCallbackHasRun, 3);
  },
  'It should pass in the ith element as the first argument to the callback.': function() {
    forEach([1], function(number) {
      eq(number, 1);
    });
  },
  'It should pass in the ith position as the second argument to the callback.': function() {
    forEach([1], function(number, index) {
      eq(index, 0);
    });
  },
  'It should pass in the original array as the third argument to the callback.': function() {
    var testArray = [1, 2, 3];
    forEach(testArray, function(number, index, originalArray) {
      eq(originalArray, testArray)
    });
  },
  'It should accept an optional configurable "this" object': function() {
    forEach([1], function() {
    eq(this.description, 'I am a configurable this object that should be accesible inside of the callback');
   }, {description: 'I am a configurable this object that should be accesible inside of the callback'});
  }

});
</script>
